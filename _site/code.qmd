---
title: "R Code"
editor: visual
---

## Code for visualizing the negative economic impact of COVID-19 on tourism

### Plot 1

#Reading the csv file into a variable called data

data = read.csv("Data.csv")

#Filtering the data for the years 2019 and 2020

data_filtered = data\[data\$Year %in% c(2019, 2020), \]

#Loading the necessary libraries, ggplot2 and plotly

library(ggplot2)

library(plotly)

#Assigning the graph to a variable called plot1. Initializing ggplot and defining the asthetics. geom_bar adds the bar chart to the plot. Year is converted as factor and the bars are filled with colors based on the year

plot1 = ggplot(data_filtered, aes(x = Country, y = Loss.in.Billion, fill = as.factor(Year))) + geom_bar(stat = "identity", position = "dodge") +

#goem_text adds the labels to the plot. asthetics are defined and the width of the txt labels is adjusted using position_dodge.

geom_text(aes(label = Loss.in.Billion), position = position_dodge(width = 0.9), vjust = -0.5) + \# Adjust vertical position of labels

#scale_fill_manual is used to set the colors manually

scale_fill_manual(values = c("2019" = "purple", "2020" = "yellow")) +

#labs is used to add the labels and title to the chart. Theme customizes the appearance of the plot.

labs(title = "Loss Comparison by Country for 2019 and 2020", x = "Country", y = "Loss in Billion", fill = "Year") + theme(axis.text.x = element_text(angle = 45, hjust = 1))

#Converting plot1 to an interactive plotly object using ggplotly

plotly_plot = ggplotly(plot1)

#printing the plot

print(plotly_plot)

### Plot 2

#loading the necessary libraries tidyr, dplyr

library(tidyr)

library(dplyr)

#Reshaping the data

data_diff = spread(data_filtered, Year, Loss.in.Billion)

#Taking the absolute difference between the years and calculating the loss percentage

data_diff\$Loss_Percentage \<- (abs(data_diff\$`2020` - data_diff\$\`2019\`) / data_diff\$`2019`) \* 100

#Assigning the graph to a variable called plot2. Initializing ggplot and defining the asthetics. reorder() function arranges the countries in ascending orderof their loss percentage.

plot2 = ggplot(data_diff, aes(x = reorder(Country, Loss_Percentage), y = Loss_Percentage, fill = Loss_Percentage)) +

#geom_bar adds the bar chart to the plot. stat = "identity adds the bars heights corresponds to the values of loss_percenatge. scale_fill_gradient() adds continuous color gradient for bars with lower to higher loss percentage,

geom_bar(stat = "identity") + scale_fill_gradient(low = "lightblue", high = "darkblue") +

#Adding lables, title and customized theme

labs(title = "Comparative Analysis of Loss by Country in Percentage", x = "Country", y = "Loss (%)") + label theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(hjust = 0.5)) +

#Adding text labels to the bars. Adjusting the verticle position of the labels using vjust and adding color. The loss_percentage displayed is rounded to one decimal place.

geom_text(aes(label = round(Loss_Percentage, 1)), vjust = -0.5, color = "black") \# Add values on top of the bars print(plot2)

## Code for List of Countries and Dependencies by Population

### Plot 1

#install all the required libraries

library(leaflet)

library(dplyr)

library(readr)

library(sf)

library(RColorBrewer)

library(htmltools)

#reading the CSV file

data \<- read_csv("countries_population.csv",show_col_types = FALSE)

#Cleaning the CSV file

data\$Location \<- gsub("\_", " ", data\$Location)

#Creating the intervals

bins \<- c(0, 100000, 200000, 300000, 500000,

          3000000, 5000000, 9000000, 11000000,

          16000000, 20000000, 25000000, 40000000,

          60000000, 67000000, 90000000, 200000000,

          400000000, 1500000001)

#Legend

labels \<- c(

  "0 - 100,000",

  "100,001 - 200,000",

  "200,001 - 300,000",

  "300,001 - 500,000",

  "500,001 - 3,000,000",

  "3,000,001 - 5,000,000",

  "5,000,001 - 9,000,000",

  "9,000,001 - 11,000,000",

  "11,000,001 - 16,000,000",

  "16,000,001 - 20,000,000",

  "20,000,001 - 25,000,000",

  "25,000,001 - 40,000,000",

  "40,000,001 - 60,000,000",

  "60,000,001 - 67,000,000",

  "67,000,001 - 90,000,000",

  "90,000,001 - 200,000,000",

  "200,000,001 - 400,000,000",

  "400,000,001 - 1,500,000,001"

)

data\$population_group \<- cut(data\$Population, breaks = bins,

                             include.lowest = TRUE,

                             labels = labels)

\# We need colours for the number of intervels we have

num_colors \<- length(labels)

color_palette \<- colorRampPalette(brewer.pal(9, "Blues")) 

colors \<- color_palette(num_colors)

#Importing the world dataset

world \<- st_as_sf(maps::map("world", fill = TRUE, plot = FALSE))

#Left joining the world dataset with our.

world_data \<- world %\>%

  left_join(data, by = c("ID" = "Location")) %\>%

  mutate(color = colors\[as.numeric(cut(Population, breaks = bins, include.lowest = TRUE))\])

\# Visual 1

leaflet_map \<- leaflet(world_data) %\>%

  addTiles() %\>%

  setView(lng = 0, lat = 20, zoom = 2) %\>%

  addPolygons(fillColor = \~color,

              weight = 1,

              opacity = 1,

              color = 'white',

              dashArray = '3',

              fillOpacity = 0.7,

              highlightOptions = highlightOptions(

                weight = 5,

                color = '#666',

                dashArray = '',

                fillOpacity = 0.7,

                bringToFront = TRUE),

              label = \~paste(ID, "\<br\>",

                             "Population: ", Population, "\<br\>",

                             "% of World: ", \`%\_ofworld\`),

              labelOptions = labelOptions(style = list('font-weight' = 'normal',

                                                       padding = '3px 8px'),

                                          textsize = "15px",

                                          direction = "auto")) %\>%

  addLegend(pal = colorFactor(colors, NULL),

            values = \~population_group,

            labels = labels,  \# Update labels to show intervals

            opacity = 0.7,

            title = "Population Groups", position = "bottomright")

leaflet_map

### Plot 2

#Loading the libraries

library(dplyr)

library(purrr)

library(highcharter)

data1 \<- read.csv("countries_population_continents.csv")

\# Group the data by continent and summarize the total population for each continent

by_continent \<- data1 %\>%

  group_by(Continent) %\>%

  summarise(Population = sum(Population, na.rm = TRUE), .groups = 'drop')

#Prepare drilldown data for Africa

drilldown_chart_data \<- data1 %\>%

  filter(Continent == "Africa") %\>%

  select(Location, Population) %\>%

  mutate(

    name = Location,

    y = Population

  ) %\>%

  select(name, y) %\>%

  list_parse() 

\# Create the main Highcharts visualization

highchart() %\>%

  hc_chart(type = "column") %\>%

  hc_title(text = "Population Drilldown by Continent and Country") %\>%

  hc_subtitle(text = "Click a continent to see the countries") %\>%

  hc_xAxis(type = "category") %\>%

  hc_yAxis(title = list(text = "Population")) %\>%

  \# Add the main series for continents

  hc_add_series(

    name = "Total Population",

    data = by_continent %\>%

      mutate(drilldown = Continent) %\>%

      select(name = Continent, y = Population, drilldown)

  ) %\>%

  \# the drilldown feature for Africa

  hc_drilldown(series = list(

    list(

      id = "Africa",

      name = "Countries",

      data = drilldown_chart_data

    )

  ))
