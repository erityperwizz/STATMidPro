[
  {
    "objectID": "Map.html",
    "href": "Map.html",
    "title": "2nd Graph",
    "section": "",
    "text": "The graph shows a list of countries and dependencies by population in 2018. This graph and dataset is from a Wikipedia page.\n\n\n\nOriginal Visualization [2]\n\n\nWhile the graph title says that the data is from 2018, there is updated data available in a table format on the same page.\nEach square in the graph represents 5000,000 people. The graph shows each country’s population and percentage of the world along with a few states and cities. This map has also calculated the continent-wise population. The sizes are different than that of a regular map, it allows for easy comparison of population sizes around the world. You can quickly see how the population of India compares with, for example, Nigeria or Brazil, as the size of the country on the map is proportional to its population. This approach utilizes the available space well by resizing countries according to their population rather than land area. This way, smaller countries with large populations (e.g., Bangladesh, Japan) are still emphasized rather than getting lost in a traditional map.\n\n\n\nSince there is no proper outline for each country, some colours are harder to distinguish from each other.\n\n\n\nEach country’s colour has been assigned randomly and not according to their population sizes.\nThe graph looks way too crowded since the creator put the population size, percentage of world as well as the name of the country all on the map.\nThe square boxes representing 500,000 people are not actually needed, it also makes the map look glitchy and non-aesthetic.\n\nTo overcome these visualization flaws and to make it most user friendly, here are the redesigns."
  },
  {
    "objectID": "Map.html#list-of-countries-and-dependencies-by-population",
    "href": "Map.html#list-of-countries-and-dependencies-by-population",
    "title": "2nd Graph",
    "section": "",
    "text": "The graph shows a list of countries and dependencies by population in 2018. This graph and dataset is from a Wikipedia page.\n\n\n\nOriginal Visualization\n\n\nWhile the graph title says that the data is from 2018, there is updated data available in a table format on the same page.\nEach square in the graph represents 5000,000 people. The graph shows each country’s population and percentage of the world along with a few states and cities. This map has also calculated the continent-wise population. The sizes are different than that of a regular map, it allows for easy comparison of population sizes around the world. You can quickly see how the population of India compares with, for example, Nigeria or Brazil, as the size of the country on the map is proportional to its population. This approach utilizes the available space well by resizing countries according to their population rather than land area. This way, smaller countries with large populations (e.g., Bangladesh, Japan) are still emphasized rather than getting lost in a traditional map.\n\n\n\nSince there is no proper outline for each country, some colours are harder to distinguish from each other.\n\n\n\nEach country’s colour has been assigned randomly and not according to their population sizes.\nThe graph looks way too crowded since the creator put the population size, percentage of world as well as the name of the country all on the map.\nThe square boxes representing 500,000 people are not actually needed, it also makes the map look glitchy and non-aesthetic.\n\nTo overcome these visualization flaws and to make it most user friendly, here are the redesigns."
  },
  {
    "objectID": "Map.html#redesign-visualization-1.",
    "href": "Map.html#redesign-visualization-1.",
    "title": "2nd Graph",
    "section": "Redesign Visualization 1.",
    "text": "Redesign Visualization 1.\n\n\n\n\n\n\nImprovements:\n\nEach country is outlined with white break lines, this shows clear separation between countries.\nThis is an interactive map, when you zoom you can seen all the names of the country, state, cities.\nThis can be helpful later on for some analysis.\nWhen you hover over the map it shows you the name of the country, the total population there and the percent of world it makes up. This information is not visible before hovering on that country, this keeps the map less cluttered.\nThe colours are in ombre dark blue to white shade, where dark blue are the densely populated countries and as the colour goes towards white those are lesser populated areas.\nThe colours are given based on certain intervals which I chose by looking at the dataset.\nThe sizes of each country is true to the real map size so that people won’t get confused by seeing offset sizes.\n\nOne piece of information that this redesign does not have is the population of continents. To overcome this flaw we can use a Drilldown chart."
  },
  {
    "objectID": "Map.html#redesign-visualization-2.",
    "href": "Map.html#redesign-visualization-2.",
    "title": "2nd Graph",
    "section": "Redesign Visualization 2.",
    "text": "Redesign Visualization 2.\nThis graph starts out with a bar graph of the total population of each continent.\n\nIt gives us the data we were missing out on by doing just maps.\nThis is also an interactieve graph, when you click on the desired continent the graph changes and shows the population of all the countries that come under that continent.\nThe bar graph is arranged in descending order.\nThe bar graph type visualization make it very easy to notice which continent has the most population , which countries are more populated ect with just a look at the visualization.\n\n\n\n\n\n\n\nSpecial efforts:\nThe data set was web-scrapped from wikipedia page table. After the data was scrapped, it was cleaned by removing spaces and ‘_’.\nSome letters had to be rewritten manually since accented letters were not recognized.\nCreated interactive plots to enhance customer/user experience.\nUsed a website to learn how to do Drilldown charts.\nHad to mutate the dataset by mapping continents to the different countries for the second visualization"
  },
  {
    "objectID": "video.html",
    "href": "video.html",
    "title": "Video Presentation Link",
    "section": "",
    "text": "This is our video presentation explaining the redesign of our selected graphs"
  },
  {
    "objectID": "Redesign.html",
    "href": "Redesign.html",
    "title": "Visualization Redesign",
    "section": "",
    "text": "Visualizing the Negative Economic Impact of COVID-19 on Tourism\n\n\n\nOriginal Visualization\n\n\n[1]The visualization depicts the economic loss, measured in billions, experienced by each county between the years 2019 and 2020. It employs a color-coded scheme to illustrate the magnitude of the loss as a percentage, highlighting the impact of COVID-19 restrictions and the subsequent decline in tourism.\nWhile the graph is visually appealing and effectively identifies the counties, it presents challenges in terms of comprehending the comparisons among them. The size of the bubbles used to represent each county’s loss can lead to misinterpretations, as the visual scale may not accurately convey the extent of the losses. Although the graph conveys significant information, there are opportunities for enhancement to improve clarity and facilitate a more straightforward comparison between counties.\n\nRedesigned Visualizations\n\nPlot 1: Loss comparison between the countries for the year 2019 and 2022\n\nThe redesigned graph is presented as a bar plot, which effectively showcases the economic losses incurred by countries in both 2019 and 2020. This format allows for a clear visual comparison of the losses experienced in each year. Each bar represents a specific country, with losses displayed in billions. The exact amounts are prominently labeled on the bars, facilitating immediate understanding of the financial impact.\nBy illustrating the data side by side for both years, this graph enables viewers to analyze trends and fluctuations in economic loss over the specified period. It provides a clearer picture of how the COVID-19 pandemic affected different countries, highlighting the extent of losses incurred. This enhanced visualization allows for a more nuanced understanding of the economic challenges faced by each country during the pandemic and offers insights into the varying degrees of impact across regions. Overall, the bar plot format enhances clarity and facilitates better analysis of the data, making it easier to identify patterns and make comparisons.\n\n\nPlot 2: Comparative analysis of loss by country in percentage\n\n\n\n\n\nThe graph can also be redesigned using a bar graph format that distinctly highlights the country with the highest economic loss. This graph provides a clear visual representation, making it easy to identify which country experienced the most significant financial impact during the pandemic. By emphasizing the highest loss, viewers gain a straightforward understanding of the economic challenges faced by this country, allowing for a more focused analysis of the data and its implications."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Plots_code.html",
    "href": "Plots_code.html",
    "title": "Untitled",
    "section": "",
    "text": "# Read the CSV file\ndata = read.csv(\"Data.csv\")\n\n\n# Preview the data\nhead(data)\n\n   Country Loss.in.Billion Year\n1    Spain            79.7 2019\n2 Thailand            59.7 2019\n3    Japan            46.1 2019\n4   Russia            11.0 2019\n5       UK            52.7 2019\n6    China            35.8 2019\n\n\n\n# Install and load the required packages\n\n\nlibrary(ggplot2)\n\n\n# Filter the data for the years 2019 and 2020\ndata_filtered &lt;- data[data$Year %in% c(2019, 2020), ]\n\n# Create a bar plot comparing the losses for 2019 and 2020 by country\nggplot(data_filtered, aes(x = Country, y = Loss.in.Billion, fill = as.factor(Year))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Loss Comparison by Country for 2019 and 2020\",\n       x = \"Country\", y = \"Loss in Billion\", fill = \"Year\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n# Calculate the difference between 2019 and 2020 losses for each country\nlibrary(tidyr) # for spread function\ndata_diff &lt;- spread(data_filtered, Year, Loss.in.Billion)\ndata_diff$Difference &lt;- data_diff$`2019` - data_diff$`2020`\n\n# Create a bar plot showing the difference in loss between 2019 and 2020\nggplot(data_diff, aes(x = Country, y = Difference)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Difference in Loss Between 2019 and 2020 by Country\",\n       x = \"Country\", y = \"Difference in Loss (Billion)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nTake 2\n\n# Load necessary libraries\nlibrary(ggplot2)\n\n# Create the plot and assign it to an object called plot1\nplot1 = ggplot(data_filtered, aes(x = Country, y = Loss.in.Billion, fill = as.factor(Year))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  \n  # Add text labels on top of the bars showing the exact loss values\n  geom_text(aes(label = Loss.in.Billion), \n            position = position_dodge(width = 0.9), \n            vjust = -0.5) +  # Adjust vertical position of labels\n  \n  # Use custom colors: purple for 2019 and yellow for 2020\n  scale_fill_manual(values = c(\"2019\" = \"purple\", \"2020\" = \"yellow\")) +\n  \n  # Set labels and theme\n  labs(title = \"Loss Comparison by Country for 2019 and 2020\",\n       x = \"Country\", y = \"Loss in Billion\", fill = \"Year\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nprint(plot1)\n\n\n\n\n\n\n\n\n\nggsave(\"C:\\\\Users\\\\jeeva\\\\OneDrive\\\\Desktop\\\\STAT - First sem\\\\Mid Project\\\\Mid Project\\\\plot1_high_res.png\", plot = plot1, dpi = 300, width = 14, height = 8, units = \"in\")\n\n\n# Load necessary libraries\nlibrary(tidyr)  # for spread function\nlibrary(ggplot2)  # for plotting\n\n# Spread data to have years as columns\ndata_diff &lt;- spread(data_filtered, Year, Loss.in.Billion)\n\n# Calculate the difference\ndata_diff$Difference &lt;- data_diff$`2019` - data_diff$`2020`\n\n# Create a bar plot showing the difference in loss between 2019 and 2020\nggplot(data_diff, aes(x = Country, y = Difference)) +\n  geom_bar(stat = \"identity\", fill = \"brown2\") +\n  labs(title = \"Comparative Analysis of Loss by Country\",  # Fixed spelling of 'Comparative'\n       x = \"Country\", y = \"Difference in Loss (Billion)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        plot.title = element_text(hjust = 0.5)) +  # Center the title\n  geom_text(aes(label = Difference), vjust = -0.5, color = \"black\")  # Add values on top of the bars\n\n\n\n\n\n\n\n\n\n# Load necessary libraries\nlibrary(tidyr)  # for spread function\nlibrary(ggplot2)  # for plotting\n\n# Spread data to have years as columns\ndata_diff &lt;- spread(data_filtered, Year, Loss.in.Billion)\n\n# Calculate the absolute percentage difference\ndata_diff$Percentage_Difference &lt;- (abs(data_diff$`2020` - data_diff$`2019`) / data_diff$`2019`) * 100\n\n# Create a bar plot showing the absolute percentage difference in loss between 2019 and 2020\nggplot(data_diff, aes(x = Country, y = Percentage_Difference)) +\n  geom_bar(stat = \"identity\", fill = \"brown2\") +\n  labs(title = \"Comparative Analysis of Loss by Country in Percentage\",\n       x = \"Country\", y = \"Percentage Difference in Loss (%)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        plot.title = element_text(hjust = 0.5)) +  # Center the title\n  geom_text(aes(label = round(Percentage_Difference, 1)), vjust = -0.5, color = \"black\")  # Add values on top of the bars\n\n\n\n\n\n\n\n\n\n# Load necessary libraries\nlibrary(tidyr)  # for spread function\nlibrary(ggplot2)  # for plotting\nlibrary(dplyr)  # for data manipulation\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n# Spread data to have years as columns\ndata_diff &lt;- spread(data_filtered, Year, Loss.in.Billion)\n\n# Calculate the absolute percentage difference and rename it\ndata_diff$Loss_Percentage &lt;- (abs(data_diff$`2020` - data_diff$`2019`) / data_diff$`2019`) * 100\n\n# Create a bar plot showing the absolute percentage difference in loss between 2019 and 2020\nplot2 = ggplot(data_diff, aes(x = reorder(Country, Loss_Percentage), y = Loss_Percentage, fill = Loss_Percentage)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_gradient(low = \"lightblue\", high = \"darkblue\") +  # Light to dark gradient\n  labs(title = \"Comparative Analysis of Loss by Country in Percentage\",\n       x = \"Country\", y = \"Loss (%)\") +  # Updated y-axis label\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        plot.title = element_text(hjust = 0.5)) +  # Center the title\n  geom_text(aes(label = round(Loss_Percentage, 1)), vjust = -0.5, color = \"black\")  # Add values on top of the bars\nprint(plot2)\n\n\n\n\n\n\n\n\n\nggsave(\"C:\\\\Users\\\\jeeva\\\\OneDrive\\\\Desktop\\\\STAT - First sem\\\\Mid Project\\\\Mid Project\\\\plot2_high_res.png\", plot = plot2, dpi = 300, width = 14, height = 8, units = \"in\")\n\n\noptions(repos = c(CRAN = \"https://cran.rstudio.com/\"))\n\ninstall.packages(\"plotly\")  # Uncomment this line to install the package\n\nInstalling package into 'C:/Users/jeeva/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\npackage 'plotly' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\jeeva\\AppData\\Local\\Temp\\Rtmpw5bNtP\\downloaded_packages\n\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\n\n#3 Load necessary libraries\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Create the plot and assign it to an object called plot1\nplot1 &lt;- ggplot(data_filtered, aes(x = Country, y = Loss.in.Billion, fill = as.factor(Year))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  \n  # Add text labels on top of the bars showing the exact loss values\n  geom_text(aes(label = Loss.in.Billion), \n            position = position_dodge(width = 0.9), \n            vjust = -0.5) +  # Adjust vertical position of labels\n  \n  # Use custom colors: purple for 2019 and yellow for 2020\n  scale_fill_manual(values = c(\"2019\" = \"purple\", \"2020\" = \"yellow\")) +\n  \n  # Set labels and theme\n  labs(title = \"Loss Comparison by Country for 2019 and 2020\",\n       x = \"Country\", y = \"Loss in Billion\", fill = \"Year\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert to an interactive plot\nplotly_plot &lt;- ggplotly(plot1)\n\n# Print the interactive plot\nprint(plotly_plot)\n\n\ninstall.packages(\"htmlwidgets\")\n\nInstalling package into 'C:/Users/jeeva/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\npackage 'htmlwidgets' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\jeeva\\AppData\\Local\\Temp\\Rtmpw5bNtP\\downloaded_packages\n\n\n\n#3 Load necessary libraries\nlibrary(ggplot2)\nlibrary(plotly)\n# Save the interactive plot as an HTML file\nlibrary(htmlwidgets)\n\n# Create the plot and assign it to an object called plot1\nplot1 &lt;- ggplot(data_filtered, aes(x = Country, y = Loss.in.Billion, fill = as.factor(Year))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  \n  # Add text labels on top of the bars showing the exact loss values\n  geom_text(aes(label = Loss.in.Billion), \n            position = position_dodge(width = 0.9), \n            vjust = -0.5) +  # Adjust vertical position of labels\n  \n  # Use custom colors: purple for 2019 and yellow for 2020\n  scale_fill_manual(values = c(\"2019\" = \"purple\", \"2020\" = \"yellow\")) +\n  \n  # Set labels and theme\n  labs(title = \"Loss Comparison by Country for 2019 and 2020\",\n       x = \"Country\", y = \"Loss in Billion\", fill = \"Year\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert to an interactive plot\nplotly_plot &lt;- ggplotly(plot1)\n\n# Print the interactive plot\nprint(plotly_plot)\n\n# Save plot as an HTML file\nsaveWidget(plotly_plot, \"interactive_plot.html\", selfcontained = TRUE)"
  },
  {
    "objectID": "reference.html",
    "href": "reference.html",
    "title": "Future Scope and Refernces",
    "section": "",
    "text": "Visualizing the Negative Economic Impact of COVID-19 on Tourism: In addition to the current visualization, there are numerous opportunities to enhance the analysis by incorporating additional data sources and alternative visualization techniques. For instance, we could integrate demographic data, such as population size or tourism statistics, to provide context for the economic losses. This would allow us to assess the impact of losses relative to the population or tourism activity, offering deeper insights into the severity of the economic downturn. Furthermore, exploring different visualization formats, such as line graphs to illustrate trends over time or heat maps to visualize losses geographically, could enhance understanding of the data. By employing interactive visualizations, users could engage with the data more dynamically, filtering by region or loss percentage, thus uncovering patterns that static graphs might not reveal. These enhancements would not only enrich the narrative surrounding the economic impact of COVID-19 but also allow for more comprehensive comparisons across various factors and regions.\nList of Countries and Dependencies by Population:\nApart from this if we receive more detailed data like population of all the cities in each country we can make a more informative and detailed graph. We can use multiple google maps for zooming out to see the countries and continents and zooming in to see the cities. We can also do a similar thing to drill down where we drill down more for each country to see its cities."
  },
  {
    "objectID": "reference.html#future-enhancements",
    "href": "reference.html#future-enhancements",
    "title": "Future Scope and Refernces",
    "section": "",
    "text": "Visualizing the Negative Economic Impact of COVID-19 on Tourism: In addition to the current visualization, there are numerous opportunities to enhance the analysis by incorporating additional data sources and alternative visualization techniques. For instance, we could integrate demographic data, such as population size or tourism statistics, to provide context for the economic losses. This would allow us to assess the impact of losses relative to the population or tourism activity, offering deeper insights into the severity of the economic downturn. Furthermore, exploring different visualization formats, such as line graphs to illustrate trends over time or heat maps to visualize losses geographically, could enhance understanding of the data. By employing interactive visualizations, users could engage with the data more dynamically, filtering by region or loss percentage, thus uncovering patterns that static graphs might not reveal. These enhancements would not only enrich the narrative surrounding the economic impact of COVID-19 but also allow for more comprehensive comparisons across various factors and regions.\nList of Countries and Dependencies by Population:\nApart from this if we receive more detailed data like population of all the cities in each country we can make a more informative and detailed graph. We can use multiple google maps for zooming out to see the countries and continents and zooming in to see the cities. We can also do a similar thing to drill down where we drill down more for each country to see its cities."
  },
  {
    "objectID": "reference.html#references",
    "href": "reference.html#references",
    "title": "Future Scope and Refernces",
    "section": "References",
    "text": "References\n[1]HowMuch. (2021, March 16). High tourism countries’ income loss due to the pandemic. https://howmuch.net/articles/high-tourism-countries-income-loss-due-to-pandemic\n[2]Wikimedia Commons. (n.d.). Global population cartogram [Cartogram]. Wikimedia Commons. https://upload.wikimedia.org/wikipedia/commons/9/90/Global_population_cartogram.png\n[3]Wikipedia contributors. (n.d.). List of countries and dependencies by population. In Wikipedia, The Free Encyclopedia. Retrieved October 9, 2024, from https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population\n[4] R Highcharts Drilldown - How to Create Animated and Interactive Drilldown Charts in R. https://www.appsilon.com/post/r-highcharts-drilldown"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "STAT Project",
    "section": "",
    "text": "Welcome to Our Data Redesigning Project\nThis website presents the redesign of data visualizations aimed at improving clarity, insight and interactivity. Created by Jeevani Bhaskar and Erica Mathias, this website showcases a range of visualizations using R.\n\nOverview of Pages\n\nIntroduction (Current Page): An overview of the website and its goals\nVisualization Redesign (Page 2): The original visualization is transformed into two distinct visualizations, each emphasizing a better version of original visualization with enhanced interpretation.\nInteractive Map Redesign (Page 3): This page features an interactive map, design of the original map, allowing to explore the data dynamically.\n\n\n\nAdditional Resources\n\nCode Repository (Page 4): All the codes used to create these visualization is available in this page, allowing for full reproducibility and further exploration.\nFuture Scope and References (Page 5): What comes next? What other improvements can be made? Along with the references, these questions are addressed on this page.\nVideo Presentation (Page 5) : A link to the video presentation, where we explain the rationale behind each redesign and discuss our findings, is available for a more in-depth understanding of the project.\n\nWe hope you find our visualizations insightful and engaging. Feel free to explore each page and review the resources we have included.\nThank you for visiting!"
  },
  {
    "objectID": "code.html",
    "href": "code.html",
    "title": "R Code",
    "section": "",
    "text": "#Reading the csv file into a variable called data\ndata = read.csv(“Data.csv”)\n#Filtering the data for the years 2019 and 2020\ndata_filtered = data[data$Year %in% c(2019, 2020), ]\n#Loading the necessary libraries, ggplot2 and plotly\nlibrary(ggplot2)\nlibrary(plotly)\n#Assigning the graph to a variable called plot1. Initializing ggplot and defining the asthetics. geom_bar adds the bar chart to the plot. Year is converted as factor and the bars are filled with colors based on the year\nplot1 = ggplot(data_filtered, aes(x = Country, y = Loss.in.Billion, fill = as.factor(Year))) + geom_bar(stat = “identity”, position = “dodge”) +\n#goem_text adds the labels to the plot. asthetics are defined and the width of the txt labels is adjusted using position_dodge.\ngeom_text(aes(label = Loss.in.Billion), position = position_dodge(width = 0.9), vjust = -0.5) + # Adjust vertical position of labels\n#scale_fill_manual is used to set the colors manually\nscale_fill_manual(values = c(“2019” = “purple”, “2020” = “yellow”)) +\n#labs is used to add the labels and title to the chart. Theme customizes the appearance of the plot.\nlabs(title = “Loss Comparison by Country for 2019 and 2020”, x = “Country”, y = “Loss in Billion”, fill = “Year”) + theme(axis.text.x = element_text(angle = 45, hjust = 1))\n#Converting plot1 to an interactive plotly object using ggplotly\nplotly_plot = ggplotly(plot1)\n#printing the plot\nprint(plotly_plot)\n\n\n\n#loading the necessary libraries tidyr, dplyr\nlibrary(tidyr)\nlibrary(dplyr)\n#Reshaping the data\ndata_diff = spread(data_filtered, Year, Loss.in.Billion)\n#Taking the absolute difference between the years and calculating the loss percentage\ndata_diff$Loss_Percentage &lt;- (abs(data_diff$2020 - data_diff$`2019`) / data_diff$2019) * 100\n#Assigning the graph to a variable called plot2. Initializing ggplot and defining the asthetics. reorder() function arranges the countries in ascending orderof their loss percentage.\nplot2 = ggplot(data_diff, aes(x = reorder(Country, Loss_Percentage), y = Loss_Percentage, fill = Loss_Percentage)) +\n#geom_bar adds the bar chart to the plot. stat = “identity adds the bars heights corresponds to the values of loss_percenatge. scale_fill_gradient() adds continuous color gradient for bars with lower to higher loss percentage,\ngeom_bar(stat = “identity”) + scale_fill_gradient(low = “lightblue”, high = “darkblue”) +\n#Adding lables, title and customized theme\nlabs(title = “Comparative Analysis of Loss by Country in Percentage”, x = “Country”, y = “Loss (%)”) + label theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(hjust = 0.5)) +\n#Adding text labels to the bars. Adjusting the verticle position of the labels using vjust and adding color. The loss_percentage displayed is rounded to one decimal place.\ngeom_text(aes(label = round(Loss_Percentage, 1)), vjust = -0.5, color = “black”) # Add values on top of the bars print(plot2)"
  },
  {
    "objectID": "code.html#code-for-visualizing-the-negative-economic-impact-of-covid-19-on-tourism",
    "href": "code.html#code-for-visualizing-the-negative-economic-impact-of-covid-19-on-tourism",
    "title": "R Code",
    "section": "",
    "text": "#Reading the csv file into a variable called data\ndata = read.csv(“Data.csv”)\n#Filtering the data for the years 2019 and 2020\ndata_filtered = data[data$Year %in% c(2019, 2020), ]\n#Loading the necessary libraries, ggplot2 and plotly\nlibrary(ggplot2)\nlibrary(plotly)\n#Assigning the graph to a variable called plot1. Initializing ggplot and defining the asthetics. geom_bar adds the bar chart to the plot. Year is converted as factor and the bars are filled with colors based on the year\nplot1 = ggplot(data_filtered, aes(x = Country, y = Loss.in.Billion, fill = as.factor(Year))) + geom_bar(stat = “identity”, position = “dodge”) +\n#goem_text adds the labels to the plot. asthetics are defined and the width of the txt labels is adjusted using position_dodge.\ngeom_text(aes(label = Loss.in.Billion), position = position_dodge(width = 0.9), vjust = -0.5) + # Adjust vertical position of labels\n#scale_fill_manual is used to set the colors manually\nscale_fill_manual(values = c(“2019” = “purple”, “2020” = “yellow”)) +\n#labs is used to add the labels and title to the chart. Theme customizes the appearance of the plot.\nlabs(title = “Loss Comparison by Country for 2019 and 2020”, x = “Country”, y = “Loss in Billion”, fill = “Year”) + theme(axis.text.x = element_text(angle = 45, hjust = 1))\n#Converting plot1 to an interactive plotly object using ggplotly\nplotly_plot = ggplotly(plot1)\n#printing the plot\nprint(plotly_plot)\n\n\n\n#loading the necessary libraries tidyr, dplyr\nlibrary(tidyr)\nlibrary(dplyr)\n#Reshaping the data\ndata_diff = spread(data_filtered, Year, Loss.in.Billion)\n#Taking the absolute difference between the years and calculating the loss percentage\ndata_diff$Loss_Percentage &lt;- (abs(data_diff$2020 - data_diff$`2019`) / data_diff$2019) * 100\n#Assigning the graph to a variable called plot2. Initializing ggplot and defining the asthetics. reorder() function arranges the countries in ascending orderof their loss percentage.\nplot2 = ggplot(data_diff, aes(x = reorder(Country, Loss_Percentage), y = Loss_Percentage, fill = Loss_Percentage)) +\n#geom_bar adds the bar chart to the plot. stat = “identity adds the bars heights corresponds to the values of loss_percenatge. scale_fill_gradient() adds continuous color gradient for bars with lower to higher loss percentage,\ngeom_bar(stat = “identity”) + scale_fill_gradient(low = “lightblue”, high = “darkblue”) +\n#Adding lables, title and customized theme\nlabs(title = “Comparative Analysis of Loss by Country in Percentage”, x = “Country”, y = “Loss (%)”) + label theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(hjust = 0.5)) +\n#Adding text labels to the bars. Adjusting the verticle position of the labels using vjust and adding color. The loss_percentage displayed is rounded to one decimal place.\ngeom_text(aes(label = round(Loss_Percentage, 1)), vjust = -0.5, color = “black”) # Add values on top of the bars print(plot2)"
  },
  {
    "objectID": "code.html#code-for-list-of-countries-and-dependencies-by-population",
    "href": "code.html#code-for-list-of-countries-and-dependencies-by-population",
    "title": "R Code",
    "section": "Code for List of Countries and Dependencies by Population",
    "text": "Code for List of Countries and Dependencies by Population\n\nPlot 1\n#install all the required libraries\nlibrary(leaflet)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(sf)\nlibrary(RColorBrewer)\nlibrary(htmltools)\n#reading the CSV file\ndata &lt;- read_csv(“countries_population.csv”,show_col_types = FALSE)\n#Cleaning the CSV file\ndata$Location &lt;- gsub(“_”, ” “, data$Location)\n#Creating the intervals\nbins &lt;- c(0, 100000, 200000, 300000, 500000,\n          3000000, 5000000, 9000000, 11000000,\n          16000000, 20000000, 25000000, 40000000,\n          60000000, 67000000, 90000000, 200000000,\n          400000000, 1500000001)\n#Legend\nlabels &lt;- c(\n  “0 - 100,000”,\n  “100,001 - 200,000”,\n  “200,001 - 300,000”,\n  “300,001 - 500,000”,\n  “500,001 - 3,000,000”,\n  “3,000,001 - 5,000,000”,\n  “5,000,001 - 9,000,000”,\n  “9,000,001 - 11,000,000”,\n  “11,000,001 - 16,000,000”,\n  “16,000,001 - 20,000,000”,\n  “20,000,001 - 25,000,000”,\n  “25,000,001 - 40,000,000”,\n  “40,000,001 - 60,000,000”,\n  “60,000,001 - 67,000,000”,\n  “67,000,001 - 90,000,000”,\n  “90,000,001 - 200,000,000”,\n  “200,000,001 - 400,000,000”,\n  “400,000,001 - 1,500,000,001”\n)\ndata$population_group &lt;- cut(data$Population, breaks = bins,\n                             include.lowest = TRUE,\n                             labels = labels)\n# We need colours for the number of intervels we have\nnum_colors &lt;- length(labels)\ncolor_palette &lt;- colorRampPalette(brewer.pal(9, “Blues”)) \ncolors &lt;- color_palette(num_colors)\n#Importing the world dataset\nworld &lt;- st_as_sf(maps::map(“world”, fill = TRUE, plot = FALSE))\n#Left joining the world dataset with our.\nworld_data &lt;- world %&gt;%\n  left_join(data, by = c(“ID” = “Location”)) %&gt;%\n  mutate(color = colors[as.numeric(cut(Population, breaks = bins, include.lowest = TRUE))])\n# Visual 1\nleaflet_map &lt;- leaflet(world_data) %&gt;%\n  addTiles() %&gt;%\n  setView(lng = 0, lat = 20, zoom = 2) %&gt;%\n  addPolygons(fillColor = ~color,\n              weight = 1,\n              opacity = 1,\n              color = ‘white’,\n              dashArray = ‘3’,\n              fillOpacity = 0.7,\n              highlightOptions = highlightOptions(\n                weight = 5,\n                color = ‘#666’,\n                dashArray = ’’,\n                fillOpacity = 0.7,\n                bringToFront = TRUE),\n              label = ~paste(ID, “&lt;br&gt;”,\n                             “Population:”, Population, “&lt;br&gt;”,\n                             “% of World:”, `%_ofworld`),\n              labelOptions = labelOptions(style = list(‘font-weight’ = ‘normal’,\n                                                       padding = ‘3px 8px’),\n                                          textsize = “15px”,\n                                          direction = “auto”)) %&gt;%\n  addLegend(pal = colorFactor(colors, NULL),\n            values = ~population_group,\n            labels = labels,  # Update labels to show intervals\n            opacity = 0.7,\n            title = “Population Groups”, position = “bottomright”)\nleaflet_map\n\n\nPlot 2\n#Loading the libraries\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(highcharter)\ndata1 &lt;- read.csv(“countries_population_continents.csv”)\n# Group the data by continent and summarize the total population for each continent\nby_continent &lt;- data1 %&gt;%\n  group_by(Continent) %&gt;%\n  summarise(Population = sum(Population, na.rm = TRUE), .groups = ‘drop’)\n#Prepare drilldown data for Africa\ndrilldown_chart_data &lt;- data1 %&gt;%\n  filter(Continent == “Africa”) %&gt;%\n  select(Location, Population) %&gt;%\n  mutate(\n    name = Location,\n    y = Population\n  ) %&gt;%\n  select(name, y) %&gt;%\n  list_parse() \n# Create the main Highcharts visualization\nhighchart() %&gt;%\n  hc_chart(type = “column”) %&gt;%\n  hc_title(text = “Population Drilldown by Continent and Country”) %&gt;%\n  hc_subtitle(text = “Click a continent to see the countries”) %&gt;%\n  hc_xAxis(type = “category”) %&gt;%\n  hc_yAxis(title = list(text = “Population”)) %&gt;%\n  # Add the main series for continents\n  hc_add_series(\n    name = “Total Population”,\n    data = by_continent %&gt;%\n      mutate(drilldown = Continent) %&gt;%\n      select(name = Continent, y = Population, drilldown)\n  ) %&gt;%\n  # the drilldown feature for Africa\n  hc_drilldown(series = list(\n    list(\n      id = “Africa”,\n      name = “Countries”,\n      data = drilldown_chart_data\n    )\n  ))"
  },
  {
    "objectID": "Map.html#list-of-countries-and-dependencies-by-population3",
    "href": "Map.html#list-of-countries-and-dependencies-by-population3",
    "title": "2nd Graph",
    "section": "",
    "text": "The graph shows a list of countries and dependencies by population in 2018. This graph and dataset is from a Wikipedia page.\n\n\n\nOriginal Visualization [2]\n\n\nWhile the graph title says that the data is from 2018, there is updated data available in a table format on the same page.\nEach square in the graph represents 5000,000 people. The graph shows each country’s population and percentage of the world along with a few states and cities. This map has also calculated the continent-wise population. The sizes are different than that of a regular map, it allows for easy comparison of population sizes around the world. You can quickly see how the population of India compares with, for example, Nigeria or Brazil, as the size of the country on the map is proportional to its population. This approach utilizes the available space well by resizing countries according to their population rather than land area. This way, smaller countries with large populations (e.g., Bangladesh, Japan) are still emphasized rather than getting lost in a traditional map.\n\n\n\nSince there is no proper outline for each country, some colours are harder to distinguish from each other.\n\n\n\nEach country’s colour has been assigned randomly and not according to their population sizes.\nThe graph looks way too crowded since the creator put the population size, percentage of world as well as the name of the country all on the map.\nThe square boxes representing 500,000 people are not actually needed, it also makes the map look glitchy and non-aesthetic.\n\nTo overcome these visualization flaws and to make it most user friendly, here are the redesigns."
  },
  {
    "objectID": "Map.html#redesign-visualization-2.-4",
    "href": "Map.html#redesign-visualization-2.-4",
    "title": "2nd Graph",
    "section": "Redesign Visualization 2. [4]",
    "text": "Redesign Visualization 2. [4]\nThis graph starts out with a bar graph of the total population of each continent.\n\nIt gives us the data we were missing out on by doing just maps.\nThis is also an interactieve graph, when you click on the desired continent the graph changes and shows the population of all the countries that come under that continent.\nThe bar graph is arranged in descending order.\nThe bar graph type visualization make it very easy to notice which continent has the most population , which countries are more populated ect with just a look at the visualization.\n\n\n\n\n\n\n\nSpecial efforts:\nThe data set was web-scrapped from wikipedia page table. After the data was scrapped, it was cleaned by removing spaces and ‘_’.\nSome letters had to be rewritten manually since accented letters were not recognized.\nCreated interactive plots to enhance customer/user experience.\nUsed a website to learn how to do Drilldown charts.\nHad to mutate the dataset by mapping continents to the different countries for the second visualization"
  }
]